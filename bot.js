import TelegramBot from 'node-telegram-bot-api'
import { config } from 'dotenv'
import { findParks } from './utils.js'

config()

const getData = async (req, res) => {
  try {
    const url = `https://apidata.mos.ru/v1/datasets/2985/features?api_key=${process.env.MOS_BASE_API_KEY}`

    const response = await fetch(url)
    const data = await response.json()
    const result = data.features.map((item) => {
      return {
        name: item.properties.attributes.Name,
        address: item.properties.attributes.Address,
        coordinates: item.geometry.coordinates.reverse(),
      }
    })
    return result
  } catch {
    console.log(res)
  }
}

export const startBot = () => {
  const bot = new TelegramBot(process.env.API_KEY_BOT, {
    polling: {
      interval: 300,
      autoStart: true,
    },
  })

  const userLocation = []
  const keyboard = [
    [{ text: 'üåê–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', request_location: true }, 'üî∂–ë–ª–∏–∂–∞–π—â–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏'],
    ['‚ùì–ü–æ–º–æ—â—å', '‚ùå–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é'],
  ]

  const commands = [
    {
      command: 'start',
      description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
    },
    {
      command: 'menu',
      description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
    },
    {
      command: 'close',
      description: '–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é',
    },
    {
      command: 'help',
      description: '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏',
    },
  ]

  bot.setMyCommands(commands)

  bot.on('polling_error', (err) => console.log(err))

  bot.on('text', async (msg) => {
    if (msg.text === '/start') {
      await bot.sendMessage(
        msg.chat.id,
        `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SearchEnergyüîã!</b>\n\n–≠—Ç–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç –∏—â–µ—Ç –∑–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –≤ –ú–æ—Å–∫–≤–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–∑—É –≥–æ—Ä–æ–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é‚úä\n`,
        {
          reply_markup: {
            keyboard,
            resize_keyboard: true,
          },
          parse_mode: 'HTML',
        }
      )
    } else if (msg.text === '/menu') {
      await bot.sendMessage(msg.chat.id, `–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é‚úä`, {
        reply_markup: {
          keyboard,
          resize_keyboard: true,
        },
      })
    } else if (msg.text === 'üî∂–ë–ª–∏–∂–∞–π—â–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏') {
      if (userLocation.length === 0) {
        await bot.sendMessage(msg.chat.id, 'üåê–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ', {
          reply_markup: {
            keyboard,
            resize_keyboard: true,
          },
        })
      } else {
        const data = await getData()
        const userParks = await findParks(data, userLocation)

        if (userParks.length == 0) {
          await bot.sendMessage(
            msg.chat.id,
            `üü•<b>–ë–ª–∏–∂–∞–π—â–∏—Ö –∫ –≤–∞–º –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>üü•`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                keyboard,
                resize_keyboard: true,
              },
            }
          )
        } else {
          let content = ''
          userParks.forEach((item) => {
            content += `<b>${item.name}</b>;\n\n<i>${item.address}</i>;\n\n<a href='https://yandex.ru/maps/?text=${item.coordinates[0]},${item.coordinates[1]}'>üó∫Ô∏è[${item.coordinates}]üó∫Ô∏è</a>\n\n`
          })

          await bot.sendMessage(
            msg.chat.id,
            `üî∂<b>–ë–ª–∏–∂–∞–π—â–∏–µ –∫ –≤–∞–º –∑–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:</b>üî∂\n\n${content}`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                keyboard,
                resize_keyboard: true,
              },
            }
          )
        }
      }
    } else if (msg.text === '‚ùå–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é' || msg.text === '/close') {
      await bot.sendMessage(msg.chat.id, '‚ùå–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ', {
        reply_markup: {
          remove_keyboard: true,
        },
      })
    } else if (msg.text === '‚ùì–ü–æ–º–æ—â—å' || msg.text === '/help') {
      await bot.sendMessage(
        msg.chat.id,
        'üìö–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω, —á—Ç–æ–±—ã —É—á–∏—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ!üî•'
      )
    } else {
      await bot.sendMessage(
        msg.chat.id,
        '‚ùì–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É‚ùì\n\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é‚úä'
      )
    }
  })

  bot.on('location', async (location) => {
    try {
      userLocation.push(location.location.latitude)
      userLocation.push(location.location.longitude)
    } catch (error) {
      console.log(error)
    }
  })
}
